<form action="#" id="announceWinnerForm" method="post" class="announce-winner-form">
    <div class="form-content">
        <div class="input-box">
            <div readonly name="announce" id="announce" title="<?php echo Mage::helper('core')->quoteEscape(Mage::helper('core')->__('Announce')) ?>" value="" class="input-text required-entry" type="text" ></div>
        </div>
        <div class="buttons-set">
            <button onclick="getWinner()" type="button" title="<?php echo Mage::helper('core')->quoteEscape(Mage::helper('core')->__('Start')) ?>" class="button"><span><span><?php echo Mage::helper('core')->__('Start') ?></span></span></button>
        </div>
    </div>
</form>
<script type="text/javascript">
    //<![CDATA[
//    var announceWinnerForm = new VarienForm('announceWinnerForm', true);
    //]]>
    var winner_string = $('name_customer').value;
    var winner = null;
    if(winner_string != null){
      winner = winner_string.split(",");
    }
    $('name_customer').remove();
    function getWinner(){
      if(winner != null){
        if(winner.length > 0){
        var winner_list = winner;
        var item = winner_list[Math.floor(Math.random()*winner_list.length)];
        var index = winner_list.indexOf(item);
        if(index > -1){
          winner_list.splice(index, 1);
        }
        winner = winner_list;
        $('announce').innerHTML = item;
        var headText = new WordShuffler(announce,{
          textColor : '#000',
          timeOffset : 18,
          mixCapital : true,
          mixSpecialCharacters : true
        });
        }
      }
<!--    else{-->
<!--      var url = '--><?php //echo Mage::getUrl("ruffle/index/getWinnerName")?><!--';-->
<!--      new Ajax.Request(url, {-->
<!--        onCreate: function(){-->
<!--  //        AmAjaxLoginObj.showLoading();-->
<!--        }.bind(this),-->
<!---->
<!--        onComplete: function(response){-->
<!--  //        AmAjaxLoginObj.hideLoading();-->
<!--          if(response.responseJSON){-->
<!--            if(response.responseJSON.success == 'true'){-->
<!--              var winner_list = response.responseJSON.list_winner;-->
<!--              var item = winner_list[Math.floor(Math.random()*winner_list.length)];-->
<!--              var index = winner_list.indexOf(item);-->
<!--              if(index > -1){-->
<!--                winner_list.splice(index, 1);-->
<!--              }-->
<!--              winner = winner_list;-->
<!--              $('announce').innerHTML = item;-->
<!--              var headText = new WordShuffler(announce,{-->
<!--                textColor : '#000',-->
<!--                timeOffset : 18,-->
<!--                mixCapital : true,-->
<!--                mixSpecialCharacters : true-->
<!--              });-->
<!--            }-->
<!--          }-->
<!--        }.bind(this)-->
<!--      });-->
<!--    }-->
  }

    function WordShuffler(holder,opt){
      var that = this;
      var time = 0;
      this.now;
      this.then = Date.now();

      this.delta;
      this.currentTimeOffset = 0;

      this.word = null;
      this.currentWord = null;
      this.currentCharacter = 0;
      this.currentWordLength = 0;


      var options = {
        fps : 30,
        timeOffset : 5,
        textColor : '#000',
        fontSize : "50px",
        useCanvas : false,
        mixCapital : false,
        mixSpecialCharacters : false,
        needUpdate : true,
        colors : [
          '#000'
        ]
      }

      if(typeof opt != "undefined"){
        for(key in opt){
          options[key] = opt[key];
        }
      }



      this.needUpdate = true;
      this.fps = options.fps;
      this.interval = 1000/this.fps;
      this.timeOffset = options.timeOffset;
      this.textColor = options.textColor;
      this.fontSize = options.fontSize;
      this.mixCapital = options.mixCapital;
      this.mixSpecialCharacters = options.mixSpecialCharacters;
      this.colors = options.colors;

      this.useCanvas = options.useCanvas;

      this.chars = [
        'A','B','C','D',
        'E','F','G','H',
        'I','J','K','L',
        'M','N','O','P',
        'Q','R','S','T',
        'U','V','W','X',
        'Y','Z'
      ];
      this.specialCharacters = [
        'ก',	'ข',	'ฃ',	'ค',	'ฅ',	'ฆ',	'ง',	'จ',	'ฉ',	'ช',	'ซ',	
        'ฌ',	'ญ',	'ฎ',	'ฏ',	'ฐ',	'ฑ',	'ฒ','ณ','ด',	'ต',	'ถ',	
        'ท',	'ธ',	'น',	'บ',	'ป',	'ผ',	'ฝ',	'พ',	'ฟ',	'ภ',	'ม',	
        'ย',	'ร',	'ล',	'ว',	'ศ',	'ษ',	'ส',	'ห',	'ฬ',	'อ',	'ฮ'
      ]

      if(this.mixSpecialCharacters){
        this.chars = this.chars.concat(this.specialCharacters);
      }

      this.getRandomColor = function () {
        var randNum = Math.floor( Math.random() * this.colors.length );
        return this.colors[randNum];
      }

      //if Canvas

      this.position = {
        x : 0,
        y : 50
      }

      //if DOM
      if(typeof holder != "undefined"){
        this.holder = holder;
      }

      if(!this.useCanvas && typeof this.holder == "undefined"){
        console.warn('Holder must be defined in DOM Mode. Use Canvas or define Holder');
      }


      this.getRandCharacter = function(characterToReplace){
        if(characterToReplace == " "){
          return ' ';
        }
        var randNum = Math.floor(Math.random() * this.chars.length);
        var lowChoice =  -.5 + Math.random();
        var picketCharacter = this.chars[randNum];
        var choosen = picketCharacter.toLowerCase();
        if(this.mixCapital){
          choosen = lowChoice < 0 ? picketCharacter.toLowerCase() : picketCharacter;
        }
        return choosen;

      }

      this.writeWord = function(word){
        this.word = word;
        this.currentWord = word.split('');
        this.currentWordLength = this.currentWord.length;

      }

      this.generateSingleCharacter = function (color,character) {
        var span = document.createElement('span');
        span.style.color = color;
        span.innerHTML = character;
        return span;
      }

      this.updateCharacter = function (time) {

        this.now = Date.now();
        this.delta = this.now - this.then;



        if (this.delta > this.interval) {
          this.currentTimeOffset++;

          var word = [];

          if(this.currentTimeOffset === this.timeOffset && this.currentCharacter !== this.currentWordLength){
            this.currentCharacter++;
            this.currentTimeOffset = 0;
          }
          for(var k=0;k<this.currentCharacter;k++){
            word.push(this.currentWord[k]);
          }

          for(var i=0;i<this.currentWordLength - this.currentCharacter;i++){
            word.push(this.getRandCharacter(this.currentWord[this.currentCharacter+i]));
          }


          if(that.useCanvas){
            c.clearRect(0,0,stage.x * stage.dpr , stage.y * stage.dpr);
            c.font = that.fontSize + " sans-serif";
            var spacing = 0;
            word.forEach(function (w,index) {
              if(index > that.currentCharacter){
                c.fillStyle = that.getRandomColor();
              }else{
                c.fillStyle = that.textColor;
              }
              c.fillText(w, that.position.x + spacing, that.position.y);
              spacing += c.measureText(w).width;
            });
          }else{

            if(that.currentCharacter === that.currentWordLength){
              that.needUpdate = false;
            }
            this.holder.innerHTML = '';
            word.forEach(function (w,index) {
              var color = null
              if(index > that.currentCharacter){
                color = that.getRandomColor();
              }else{
                color = that.textColor;
              }
              that.holder.appendChild(that.generateSingleCharacter(color, w));
            });
          }
          this.then = this.now - (this.delta % this.interval);
        }
      }

      this.restart = function () {
        this.currentCharacter = 0;
        this.needUpdate = true;
      }

      function update(time) {
        time++;
        if(that.needUpdate){
          that.updateCharacter(time);
        }
        requestAnimationFrame(update);
      }

      this.writeWord(this.holder.innerHTML);


      console.log(this.currentWord);
      update(time);
    }
</script>