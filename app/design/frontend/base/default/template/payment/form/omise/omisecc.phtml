<?php $_code = $this->getMethodCode(); ?>

<ul id="payment_form_<?php echo $_code; ?>" class="form-list" style="display:none;">

    <!-- Omise's validation advice -->
    <li>
        <div id="omise-validation-advice" class="validation-advice"></div>
    </li>

    <!-- Card Type -->
    <li>
        <label for="<?php echo $_code; ?>_cc_type" class="required">
            <em>*</em><?php echo $this->__('Credit Card Type'); ?>
        </label>
        <div class="input-box">
            <select id="<?php echo $_code; ?>_cc_type" name="payment[cc_type]" class="required-entry validate-cc-type-select">
                <option value=""><?php echo $this->__('--Please Select--'); ?></option>

                <?php $_ccType = $this->getInfoData('cc_type'); ?>
                <?php foreach ($this->getCcAvailableTypes() as $_typeCode => $_typeName): ?>
                    <option value="<?php echo $_typeCode; ?>"<?php if($_typeCode == $_ccType): ?> selected="selected"<?php endif; ?>><?php echo $_typeName; ?></option>
                <?php endforeach; ?>
            </select>
        </div>

        <!-- For keep Omise's token -->
        <input id="<?php echo $_code; ?>_token" type="hidden" name="payment[omise_token]">
    </li>

    <!-- Card Holder Name -->
    <li>
        <label for="<?php echo $_code; ?>_cc_name" class="required">
            <em>*</em><?php echo $this->__('Credit Card Holder Name'); ?>
        </label>
        <div class="input-box">
            <input id="<?php echo $_code; ?>_cc_name" type="text" title="<?php echo $this->__('Credit Card Holder Name'); ?>" value="<?php echo $this->escapeHtml($this->getInfoData('cc_owner')); ?>" class="input-text required-entry" />
        </div>
    </li>

    <!-- Card Number -->
    <li>
        <label for="<?php echo $_code; ?>_cc_number" class="required">
            <em>*</em><?php echo $this->__('Credit Card Number'); ?>
        </label>
        <div class="input-box">
            <input id="<?php echo $_code; ?>_cc_number" type="text" title="<?php echo $this->__('Credit Card Number'); ?>" autocomplete="off" value="" class="input-text validate-cc-number validate-cc-type" />
        </div>
    </li>

    <!-- Expiration Date -->
    <li id="<?php echo $_code; ?>_cc_type_exp_div">
        <label for="<?php echo $_code; ?>_expiration" class="required">
            <em>*</em><?php echo $this->__('Expiration Date'); ?>
        </label>
        <div class="input-box">
            <div class="v-fix">
                <select id="<?php echo $_code; ?>_expiration" class="month validate-cc-exp required-entry">
                    <?php $_ccExpMonth = $this->getInfoData('cc_exp_month'); ?>
                    <?php foreach ($this->getCcMonths() as $k=>$v): ?>
                        <option value="<?php echo $k ? $k : ''; ?>"<?php if($k == $_ccExpMonth): ?> selected="selected"<?php endif; ?>><?php echo $v; ?></option>
                    <?php endforeach; ?>
                </select>
            </div>
            <div class="v-fix">
                <?php $_ccExpYear = $this->getInfoData('cc_exp_year'); ?>
                <select id="<?php echo $_code; ?>_expiration_yr" class="year required-entry">
                    <?php foreach ($this->getCcYears() as $k=>$v): ?>
                        <option value="<?php echo $k ? $k : ''; ?>"<?php if($k == $_ccExpYear): ?> selected="selected"<?php endif; ?>><?php echo $v; ?></option>
                    <?php endforeach; ?>
                </select>
            </div>
        </div>
    </li>

    <li id="<?php echo $_code; ?>_cc_type_cvv_div">
        <label for="<?php echo $_code; ?>_cc_cid" class="required">
            <em>*</em><?php echo $this->__('Card Verification Number'); ?>
        </label>
        <div class="input-box">
            <div class="v-fix">
                <input id="<?php echo $_code; ?>_cc_cid" type="password" title="<?php echo $this->__('Card Verification Number'); ?>" autocomplete="off" value="" class="input-text cvv required-entry validate-cc-cvn" />
            </div>
            <a href="#" class="cvv-what-is-this"><?php echo $this->__('What is this?'); ?></a>
        </div>
    </li>

    <!-- Security Code -->
    <?php echo $this->getChildHtml(); ?>
</ul>

<script type="text/javascript">
    var method, messageBox, tokenField, cardObject, card, processing, dirty,
        buttons, inMemoryButton, getScript, createOmiseToken, successCallback,
        failCallback, alwaysCallback, disableFields, enableFields;

    method     = document.getElementById('p_method_omise_gateway');
    messageBox = document.getElementById('omise-validation-advice');
    tokenField = document.getElementById('omise_gateway_token');
    cardObject = {
        name             : document.getElementById('omise_gateway_cc_name'),
        number           : document.getElementById('omise_gateway_cc_number'),
        expiration_month : document.getElementById('omise_gateway_expiration'),
        expiration_year  : document.getElementById('omise_gateway_expiration_yr'),
        security_code    : document.getElementById('omise_gateway_cc_cid')
    };
    card       = {};
    processing = false;
    dirty      = true;

    /**
     * @param  {string}   url
     * @param  {Function} success
     *
     * @return {void}
     */
    getScript = function(url, success) {
        var script, head, done;

        script     = document.createElement("script");
        script.src = url;

        head = document.getElementsByTagName("head")[0];
        done = false;

        // Attach handlers for all browsers
        script.onload = script.onreadystatechange = function() {
            if (! done && (!this.readyState || this.readyState == "loaded" || this.readyState == "complete")) {
                done = true;

                // callback function provided as param
                success();

                script.onload = script.onreadystatechange = null;
                head.removeChild(script);
            };
        };

        head.appendChild(script);
    };

    /**
     * @return {void}
     */
    createOmiseToken = function() {
        Omise.setPublicKey("<?php echo $this->getOmiseKeys('public_key'); ?>");

        Omise.createToken("card", card, function(statusCode, response) {
            if (statusCode == 200) {
                successCallback(statusCode, response);
            }
            else {
                failCallback(statusCode, response);
            }

            alwaysCallback(statusCode, response);
        });
    }

    /**
     * @param  {number} statusCode
     * @param  {Object} response
     *
     * @return {mix}
     */
    successCallback = function(statusCode, response) {
        tokenField.value = response.id;
    }

    /**
     * @param  {number} statusCode
     * @param  {Object} response
     *
     * @return {mix}
     */
    failCallback = function(statusCode, response) {
        messageBox.innerHTML = response.message;
    }

    /**
     * @param  {number} statusCode
     * @param  {Object} response
     *
     * @return {mix}
     */
    alwaysCallback = function(statusCode, response) {
        return true;
    }

    /**
     * @param  {Object} fields
     *
     * @return {void}
     */
    disableFields = function(fields) {
        for (field in fields) {
            fields[field].disabled = true;
        }
    }

    /**
     * @param  {Object} fields
     *
     * @return {void}
     */
    enableFields = function(fields) {
        for (field in fields) {
            fields[field].disabled = false;
        }
    }

    if ('<?php echo $this->isOscSupportEnabled(); ?>') {
        var observeForm;

        /**
         * @param  {number} statusCode
         * @param  {Object} response
         *
         * @return {mix}
         */
        successCallback = function(statusCode, response) {
            if (typeof response.card != 'undefined' && !response.card.security_code_check) {
                messageBox.innerHTML = 'This card cannot be authorized, the security code is invalid.';
            }
            else {
                tokenField.value = response.id;
            }
        }

        /**
         * @param  {number} statusCode
         * @param  {Object} response
         *
         * @return {mix}
         */
        alwaysCallback = function(statusCode, response) {
            var i;

            for (i = 0; i < inMemoryButton.length; ++i) {
                inMemoryButton[i].disabled = false;
            }

            processing = false;
            dirty      = false;
            enableFields(cardObject);
        }

        /**
         * @param  {Object} event
         *
         * @return {mix}
         */
        observeForm = function(event) {
            event.preventDefault();

            for (key in cardObject) {
                if (card[key] && card[key] != cardObject[key].value) {
                    dirty            = true;
                    tokenField.value = '';
                }

                if (cardObject[key].value == '') {
                    return false;
                }

                card[key] = cardObject[key].value;
            }

            if (! processing && dirty) {
                var i;

                processing           = true;
                buttons              = document.getElementsByTagName('button');
                inMemoryButton       = [];
                messageBox.innerHTML = '';

                disableFields(cardObject);

                for (i = 0; i < buttons.length; ++i) {
                    if (! buttons[i].disabled) {
                        buttons[i].disabled = true;
                        inMemoryButton.push(buttons[i]);
                    }
                }

                if (typeof Omise === 'undefined') {
                    getScript('https://cdn.omise.co/omise.min.js.gz', createOmiseToken);
                }
                else {
                    createOmiseToken();
                }
            }
        }

        cardObject.name.addEventListener('blur', observeForm);
        cardObject.number.addEventListener('blur', observeForm);
        cardObject.expiration_month.addEventListener('blur', observeForm);
        cardObject.expiration_year.addEventListener('blur', observeForm);
        cardObject.security_code.addEventListener('blur', observeForm);
    }
    else {
        // Hook Payment.save function by wrapping Omise logic on top of the 'Payment.prototype.save'
        Payment.prototype.save = Payment.prototype.save.wrap(function(superMethod) {
            var validator;

            if (! method.checked) {
                return superMethod();
            }

            /**
             * @param  {number} statusCode
             * @param  {Object} response
             *
             * @return {mix}
             */
            successCallback = function(statusCode, response) {
                if (typeof response.card != 'undefined' && !response.card.security_code_check) {
                    messageBox.innerHTML = 'This card cannot be authorized, security code is invalid.';
                }
                else {
                    tokenField.value = response.id;
                    checkout.setLoadWaiting(false);

                    return superMethod();
                }
            }

            /**
             * @param  {number} statusCode
             * @param  {Object} response
             *
             * @return {mix}
             */
            alwaysCallback = function(statusCode, response) {
                enableFields(cardObject);
                checkout.setLoadWaiting(false);
            }

            validator = new Validation('co-payment-form');

            if (validator.validate()) {
                checkout.setLoadWaiting('payment');
                disableFields(cardObject);

                for (key in cardObject) {
                    card[key] = cardObject[key].value;
                }

                if (typeof Omise === 'undefined') {
                    getScript('https://cdn.omise.co/omise.min.js.gz', createOmiseToken);
                }
                else {
                    createOmiseToken();
                }
            }
        });
    }
</script>
